import os
import sys
import time
from dotenv import load_dotenv

# Import app sau khi load environment variables
from app import create_app

def run_system_checks():
    """Ch·∫°y c√°c ki·ªÉm tra h·ªá th·ªëng tr∆∞·ªõc khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
    print("üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra h·ªá th·ªëng...")
    
    # 1. Ki·ªÉm tra phi√™n b·∫£n Python
    print(f"‚úì Python version: {sys.version}")
    if sys.version_info < (3, 8):
        print("‚ùå C·∫¢NH B√ÅO: Python version < 3.8 c√≥ th·ªÉ g√¢y v·∫•n ƒë·ªÅ")
    
    # 2. Ki·ªÉm tra c√°c th∆∞ vi·ªán quan tr·ªçng
    required_packages = [
        'flask', 'flask_sqlalchemy', 'flask_login', 'flask_wtf', 
        'flask_socketio', 'werkzeug', 'sqlalchemy'
    ]
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úì {package} imported successfully")
        except ImportError as e:
            print(f"‚ùå L·ªói import {package}: {e}")
            return False
    
    # 3. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng
    required_env_vars = ['SECRET_KEY', 'DATABASE_URL', 'FLASK_APP']
    missing_vars = []
    
    for var in required_env_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è  Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng: {', '.join(missing_vars)}")
    else:
        print("‚úì T·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh")
    
    # 4. Ki·ªÉm tra SECRET_KEY
    secret_key = os.getenv('SECRET_KEY')
    if secret_key:
        print(f"‚úì SECRET_KEY is set: {secret_key[:10]}...")
        if len(secret_key) < 32:
            print("‚ö†Ô∏è  C·∫¢NH B√ÅO: SECRET_KEY qu√° ng·∫Øn, n√™n d√†i √≠t nh·∫•t 32 k√Ω t·ª±")
    
    return True

def test_app_creation():
    """Ki·ªÉm tra vi·ªác t·∫°o ·ª©ng d·ª•ng Flask"""
    print("\nüîß Ki·ªÉm tra t·∫°o ·ª©ng d·ª•ng...")
    
    try:
        from app import create_app
        app, socketio = create_app()
        print("‚úì ·ª®ng d·ª•ng Flask ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
        
        # Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu
        with app.app_context():
            from app.models import db, NguoiDung, CaiDatHeThong
            
            # T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
            db.create_all()
            print("‚úì C∆° s·ªü d·ªØ li·ªáu ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng")
            
            # Ki·ªÉm tra k·∫øt n·ªëi database
            try:
                user_count = NguoiDung.query.count()
                print(f"‚úì K·∫øt n·ªëi database OK - C√≥ {user_count} ng∆∞·ªùi d√πng")
            except Exception as e:
                print(f"‚ö†Ô∏è  C·∫£nh b√°o database: {e}")
              # Ki·ªÉm tra c√°c route ch√≠nh
            routes = [route.rule for route in app.url_map.iter_rules()]
            important_routes = {
                '/': 'Trang ch·ªß',
                '/auth/login': 'ƒêƒÉng nh·∫≠p', 
                '/auth/register': 'ƒêƒÉng k√Ω',
                '/admin/': 'Admin dashboard',
                '/user/dashboard': 'User dashboard'
            }
            
            print("üìã Ki·ªÉm tra c√°c route quan tr·ªçng:")
            for route, description in important_routes.items():
                found = any(r == route or r.startswith(route) for r in routes)
                if found:
                    print(f"  ‚úì {description} ({route})")
                else:
                    # Ki·ªÉm tra pattern match linh ho·∫°t h∆°n
                    pattern_found = False
                    if 'login' in route:
                        pattern_found = any('login' in r for r in routes)
                    elif 'register' in route:
                        pattern_found = any('register' in r for r in routes)
                    elif 'dashboard' in route:
                        pattern_found = any('dashboard' in r for r in routes)
                    elif route == '/admin/':
                        pattern_found = any(r.startswith('/admin') for r in routes)
                    
                    if pattern_found:
                        print(f"  ‚úì {description} (pattern found)")
                    else:
                        print(f"  ‚ö†Ô∏è  {description} kh√¥ng t√¨m th·∫•y")
        
        return app, socketio
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o ·ª©ng d·ª•ng: {e}")
        import traceback
        traceback.print_exc()
        return None, None

def check_database_health():
    """Ki·ªÉm tra t√¨nh tr·∫°ng c∆° s·ªü d·ªØ li·ªáu"""
    print("\nüíæ Ki·ªÉm tra t√¨nh tr·∫°ng c∆° s·ªü d·ªØ li·ªáu...")
    
    try:
        from app import create_app
        from app.models import db, NguoiDung, CaiDatHeThong, CaThucHanh
        
        app, _ = create_app()
        with app.app_context():
            # Ki·ªÉm tra c√°c b·∫£ng ch√≠nh
            tables_to_check = [
                ('nguoi_dung', NguoiDung),
                ('cai_dat_he_thong', CaiDatHeThong),
                ('ca_thuc_hanh', CaThucHanh)
            ]
            
            for table_name, model in tables_to_check:
                try:
                    count = model.query.count()
                    print(f"‚úì B·∫£ng {table_name}: {count} b·∫£n ghi")
                except Exception as e:
                    print(f"‚ö†Ô∏è  B·∫£ng {table_name}: {e}")
            
            # Ki·ªÉm tra admin user
            admin_users = NguoiDung.query.filter_by(vai_tro='quan_tri_he_thong').count()
            if admin_users > 0:
                print(f"‚úì C√≥ {admin_users} qu·∫£n tr·ªã h·ªá th·ªëng")
            else:
                print("‚ö†Ô∏è  Ch∆∞a c√≥ qu·∫£n tr·ªã h·ªá th·ªëng n√†o")
                
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra database: {e}")

def check_critical_services():
    """Ki·ªÉm tra c√°c service quan tr·ªçng"""
    print("\n‚öôÔ∏è  Ki·ªÉm tra c√°c service quan tr·ªçng...")
    
    try:
        # Ki·ªÉm tra UserService
        from app.services.user_service import UserService
        user_service = UserService()
        print("‚úì UserService kh·ªüi t·∫°o th√†nh c√¥ng")
        
        # Ki·ªÉm tra Cache
        from flask import current_app
        from app import create_app
        app, _ = create_app()
        with app.app_context():
            from app.cache.cache_manager import get_cache_manager
            cache_manager = get_cache_manager()
            print("‚úì Cache Manager kh·ªüi t·∫°o th√†nh c√¥ng")
            
        # Ki·ªÉm tra Utils
        from app.utils import log_activity
        print("‚úì Utils functions loaded successfully")
        
        # Ki·ªÉm tra Forms
        from app.forms import LoginForm, RegistrationForm
        print("‚úì Forms loaded successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra services: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_static_files():
    """Ki·ªÉm tra c√°c file static quan tr·ªçng"""
    print("\nüé® Ki·ªÉm tra file static...")
    
    static_files = [
        'app/static/css/base.css',
        'app/static/js/lab_sessions.js',
        'app/templates/base.html',
        'app/templates/auth/log_regis.html'
    ]
    
    for file_path in static_files:
        if os.path.exists(file_path):
            print(f"‚úì {file_path}")
        else:
            print(f"‚ö†Ô∏è  {file_path} kh√¥ng t√¨m th·∫•y")

def check_file_permissions():
    """Ki·ªÉm tra quy·ªÅn truy c·∫≠p file quan tr·ªçng"""
    print("\nüîê Ki·ªÉm tra quy·ªÅn truy c·∫≠p file...")
    
    important_files = [
        'config.py',
        'app/__init__.py',
        'app/models.py',
        'requirements.txt'
    ]
    
    for file_path in important_files:
        if os.path.exists(file_path):
            if os.access(file_path, os.R_OK):
                print(f"‚úì {file_path} - c√≥ quy·ªÅn ƒë·ªçc")
            else:
                print(f"‚ùå {file_path} - kh√¥ng c√≥ quy·ªÅn ƒë·ªçc")
        else:
            print(f"‚ö†Ô∏è  {file_path} - file kh√¥ng t·ªìn t·∫°i")
    
    # Ki·ªÉm tra th∆∞ m·ª•c instance
    instance_dir = 'instance'
    if os.path.exists(instance_dir):
        if os.access(instance_dir, os.W_OK):
            print(f"‚úì {instance_dir}/ - c√≥ quy·ªÅn ghi")
        else:
            print(f"‚ùå {instance_dir}/ - kh√¥ng c√≥ quy·ªÅn ghi")
    else:
        print(f"‚ö†Ô∏è  {instance_dir}/ - th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i")

def perform_basic_functionality_test():
    """Th·ª±c hi·ªán test c∆° b·∫£n c√°c ch·ª©c nƒÉng"""
    print("\nüß™ Test ch·ª©c nƒÉng c∆° b·∫£n...")
    
    try:
        from app import create_app
        from app.models import NguoiDung, CaiDatHeThong
        
        app, _ = create_app()
        with app.app_context():
            # Test query c∆° b·∫£n
            total_users = NguoiDung.query.count()
            print(f"‚úì Query users: {total_users} ng∆∞·ªùi d√πng")
            
            # Test setting system
            app_name = CaiDatHeThong.lay_gia_tri("app_name", "Lab Manager")
            print(f"‚úì System settings: App name = {app_name}")
            
            # Test create user service
            from app.services.user_service import UserService
            user_service = UserService()
            
            # Test email validation
            valid_email = user_service._validate_email("test@example.com")
            invalid_email = user_service._validate_email("invalid-email")
            
            if valid_email and not invalid_email:
                print("‚úì Email validation ho·∫°t ƒë·ªông ƒë√∫ng")
            else:
                print("‚ö†Ô∏è  Email validation c√≥ v·∫•n ƒë·ªÅ")
                
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test ch·ª©c nƒÉng: {e}")
        return False

# Load environment variables first, before importing anything else
env_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(env_path):
    load_dotenv(env_path)
elif os.path.exists('.env'):
    load_dotenv()

# Create Flask app instance for Flask CLI compatibility
# This makes the app available at module level for 'flask run'
app, socketio = create_app()

# Application factory function for Flask CLI
def create_app_factory():
    """Factory function for Flask CLI"""
    return create_app()[0]  # Return only the Flask app, not socketio

if __name__ == "__main__":
    print("üöÄ Lab Manager - Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng")
    print("=" * 50)
    
    # Ch·∫°y t·∫•t c·∫£ c√°c ki·ªÉm tra h·ªá th·ªëng
    if not run_system_checks():
        print("‚ùå Ki·ªÉm tra h·ªá th·ªëng th·∫•t b·∫°i. D·ª´ng kh·ªüi ƒë·ªông.")
        sys.exit(1)
    
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p file
    check_file_permissions()
    
    # T·∫°o ·ª©ng d·ª•ng v√† ki·ªÉm tra
    app, socketio = test_app_creation()
    if not app or not socketio:
        print("‚ùå Kh√¥ng th·ªÉ t·∫°o ·ª©ng d·ª•ng. D·ª´ng kh·ªüi ƒë·ªông.")
        sys.exit(1)
    
    # Ki·ªÉm tra t√¨nh tr·∫°ng database
    check_database_health()
    
    # Ki·ªÉm tra c√°c service quan tr·ªçng
    if not check_critical_services():
        print("‚ùå M·ªôt s·ªë service quan tr·ªçng c√≥ v·∫•n ƒë·ªÅ. V·∫´n ti·∫øp t·ª•c kh·ªüi ƒë·ªông...")
    
    # Ki·ªÉm tra file static
    check_static_files()
    
    # Test ch·ª©c nƒÉng c∆° b·∫£n
    if not perform_basic_functionality_test():
        print("‚ùå Test ch·ª©c nƒÉng c∆° b·∫£n th·∫•t b·∫°i. V·∫´n ti·∫øp t·ª•c kh·ªüi ƒë·ªông...")
    
    print("\n" + "=" * 50)
    print("‚úÖ T·∫•t c·∫£ ki·ªÉm tra ƒë·ªÅu ho√†n th√†nh!")
    print(f"üåê ·ª®ng d·ª•ng s·∫Ω ch·∫°y t·∫°i: http://127.0.0.1:5000")
    print("üìù Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server")
    print("=" * 50)
    
    # Kh·ªüi ƒë·ªông server
    try:
        socketio.run(app, debug=True, host='127.0.0.1', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Server ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh·ªüi ƒë·ªông server: {e}")
        sys.exit(1)
